# ------------------------------------------------------------------------------
# Author:      Subin Pradeep & Utkarsh Prasad
# NetID:       subinpp2 & uprasad3
# Description: BaseDataset wrapper for synthetic EEG seizure windows, with
#              labels (1=seizure, 0=background) and subject IDs.
# ------------------------------------------------------------------------------

import os
import pickle
from typing import Tuple

import numpy as np

from pyhealth.datasets.base_dataset_v2 import BaseDatasetV2


class EEGSeizureDataset(BaseDatasetV2):
    """
    EEG Seizure Detection Dataset.

    Loads preprocessed EEG windows from a pickle file generated by
    preprocess.py in Real‑Time‑EEG‑Seizure‑Detection.

    Each sample is a 19×T float array, with a binary label and subject ID.
    """

    def __init__(self, preproc_file: str):
        """
        Args:
            preproc_file (str): Path to pickled dict with keys:
                - 'eeg'   : np.ndarray, shape (N, 19, T)
                - 'label' : np.ndarray, shape (N,), {0,1}
                - 'tag'   : np.ndarray, shape (N,), fine‑grained onset/offset
                - 'subj'  : np.ndarray, shape (N,), subject IDs
        """
        super().__init__()
        if not os.path.exists(preproc_file):
            raise FileNotFoundError(f"Cannot find {preproc_file}")
        with open(preproc_file, "rb") as f:
            data = pickle.load(f)

        self.X: np.ndarray = data["eeg"]
        self.y: np.ndarray = data["label"]
        self.tags: np.ndarray = data["tag"]
        self.subj: np.ndarray = data["subj"]

    def __len__(self) -> int:
        """Total number of windows."""
        return len(self.y)

    def __getitem__(self, idx: int) -> Tuple[np.ndarray, int, int]:
        """
        Args:
            idx (int): Index of the sample.
        Returns:
            tuple:
                - X (np.ndarray): EEG window (19×T).
                - y (int): Label, 1 for seizure, 0 for background.
                - subj (int): Subject ID of this window.
        """
        return self.X[idx], int(self.y[idx]), int(self.subj[idx])
