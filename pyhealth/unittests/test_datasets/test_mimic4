import unittest

from pyhealth.datasets import MIMIC4Dataset

within_eps = lambda a, b, epsilon: abs(a - b) < epsilon

# this test suite verifies the MIMIC3 dataset info and statistic calculations are consistent
# Synthetic_MIMIC-III dataset provided in the root is a dependancy to the expected values 
# used for testing correctness
class Mimic4Tests(unittest.TestCase):
    
    TEST_EPS = 0.25
    
    # to test the file this path needs to be updated
    ROOT = "~/Downloads/pyhealth_data/mimic-iv-clinical-database-demo-2.2/hosp"
    TABLES = ["diagnoses_icd", "procedures_icd", "labevents"]
    CODE_MAPPING = {}
    DEV = True # not needed when using demo set since its 100 patients large
    
    dataset = MIMIC4Dataset(
        root=ROOT,
        tables=TABLES,
        code_mapping=CODE_MAPPING,
        dev=DEV,
        refresh_cache=False
    )
    
    def setUp(self):
        pass
    
    # checks that dataset is ingested properly.
    # statistics run against demo dataset https://physionet.org/content/mimic-iv-demo/2.2/
    def test_initialization(self):
    
        if (self.DEV):
            expected_dev = True
        else:
            expected_dev = False
        
        print(self.dataset.info())
        print(self.dataset.stat())
        
        expected_dev = True
        expected_num_patients = 100 # for the reduced dataset at
        expected_num_visits = 275
        expected_num_visits_per_patient = 2.7500
        expected_num_events_per_table = [16.3855, 2.6255, 288.3891]
        
        assert sorted(self.TABLES) == sorted(self.dataset.available_tables)
        
        assert expected_dev == self.dataset.dev
        assert expected_num_patients == len(self.dataset.patients)
        
        actual_visits = [len(patient) for patient in self.dataset.patients.values()]
        assert expected_num_visits == sum(actual_visits)
        
        actual_visits_per_patient = sum(actual_visits) / len(actual_visits)
        assert within_eps(expected_num_visits_per_patient, actual_visits_per_patient, self.TEST_EPS)
        
        for expected_value, table in zip(expected_num_events_per_table, self.dataset.tables):
            actual_num_events = [ len(v.get_event_list(table)) for p in self.dataset.patients.values() for v in p ]
            
            actual_value_per_event_type = sum(actual_num_events) / len(actual_num_events)
            assert within_eps(expected_value, actual_value_per_event_type, self.TEST_EPS)
        
if __name__ == '__main__':
    unittest.main(verbosity=2)
    